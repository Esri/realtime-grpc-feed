'''
/* Copyright 2021 Esri
 *
 * Licensed under the Apache License Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'''

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import velocity_grpc_pb2 as velocity__grpc__pb2


class GrpcFeedStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stream = channel.stream_unary(
                '/GrpcFeed/stream',
                request_serializer=velocity__grpc__pb2.Request.SerializeToString,
                response_deserializer=velocity__grpc__pb2.Response.FromString,
                )
        self.send = channel.unary_unary(
                '/GrpcFeed/send',
                request_serializer=velocity__grpc__pb2.Request.SerializeToString,
                response_deserializer=velocity__grpc__pb2.Response.FromString,
                )


class GrpcFeedServicer(object):
    """Missing associated documentation comment in .proto file."""

    def stream(self, request_iterator, context):
        """client streaming rpc for high velocity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send(self, request, context):
        """simple rpc for lower velocity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcFeedServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stream': grpc.stream_unary_rpc_method_handler(
                    servicer.stream,
                    request_deserializer=velocity__grpc__pb2.Request.FromString,
                    response_serializer=velocity__grpc__pb2.Response.SerializeToString,
            ),
            'send': grpc.unary_unary_rpc_method_handler(
                    servicer.send,
                    request_deserializer=velocity__grpc__pb2.Request.FromString,
                    response_serializer=velocity__grpc__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GrpcFeed', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GrpcFeed(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GrpcFeed/stream',
            velocity__grpc__pb2.Request.SerializeToString,
            velocity__grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GrpcFeed/send',
            velocity__grpc__pb2.Request.SerializeToString,
            velocity__grpc__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
